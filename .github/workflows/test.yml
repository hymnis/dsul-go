name: Test

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '**.sh'
      - '**.yml'
      - '**.yaml'
  pull_request:
    branches:
      - main
      - 'feature/*'
    paths-ignore:
      - '**.md'
      - '**.sh'
      - '**.yml'
      - '**.yaml'
  workflow_dispatch:

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Vet
        run: |
          go vet ./...
        shell: bash

      - name: Test
        run: |
          go test -v ./...
        shell: bash

      - name: Coverage
        run: |
          go test -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html
        shell: bash

      - name: Upload coverage reports
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: ./coverage.*

  build:
    name: Build
    needs: test
    strategy:
     matrix:
       os: [ ubuntu-latest, windows-latest, macOS-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Build amd64
        run: |
          CURRENT_OS=$(go env GOOS)
          GOARCH=amd64 go build -v -ldflags "-X main.version=$(head -1 ./cmd/dsuld/VERSION) -X main.sha1=$(git rev-parse HEAD) -X main.buildTime=$(date +'%Y-%m-%d_%T')" -o dsuld-amd64-$CURRENT_OS ./cmd/dsuld/main.go
          GOARCH=amd64 go build -v -ldflags "-X main.version=$(head -1 ./cmd/dsulc/VERSION) -X main.sha1=$(git rev-parse HEAD) -X main.buildTime=$(date +'%Y-%m-%d_%T')" -o dsulc-amd64-$CURRENT_OS ./cmd/dsulc/main.go
        shell: bash

      - name: Build 386
        if: matrix.os != 'macOS-latest'
        run: |
          CURRENT_OS=$(go env GOOS)
          GOARCH=386 go build -v -ldflags "-X main.version=$(head -1 ./cmd/dsuld/VERSION) -X main.sha1=$(git rev-parse HEAD) -X main.buildTime=$(date +'%Y-%m-%d_%T')" -o dsuld-386-$CURRENT_OS ./cmd/dsuld/main.go
          GOARCH=386 go build -v -ldflags "-X main.version=$(head -1 ./cmd/dsulc/VERSION) -X main.sha1=$(git rev-parse HEAD) -X main.buildTime=$(date +'%Y-%m-%d_%T')" -o dsulc-386-$CURRENT_OS ./cmd/dsulc/main.go
        shell: bash

      - name: Build arm64
        if: matrix.os != 'macOS-latest'
        run: |
          CURRENT_OS=$(go env GOOS)
          GOARCH=arm64 go build -v -ldflags "-X main.version=$(head -1 ./cmd/dsuld/VERSION) -X main.sha1=$(git rev-parse HEAD) -X main.buildTime=$(date +'%Y-%m-%d_%T')" -o dsuld-arm64-$CURRENT_OS ./cmd/dsuld/main.go
          GOARCH=arm64 go build -v -ldflags "-X main.version=$(head -1 ./cmd/dsulc/VERSION) -X main.sha1=$(git rev-parse HEAD) -X main.buildTime=$(date +'%Y-%m-%d_%T')" -o dsulc-arm64-$CURRENT_OS ./cmd/dsulc/main.go
        shell: bash

      - name: Build arm
        if: matrix.os != 'macOS-latest'
        run: |
          CURRENT_OS=$(go env GOOS)
          GOARCH=arm go build -v -ldflags "-X main.version=$(head -1 ./cmd/dsuld/VERSION) -X main.sha1=$(git rev-parse HEAD) -X main.buildTime=$(date +'%Y-%m-%d_%T')" -o dsuld-arm-$CURRENT_OS ./cmd/dsuld/main.go
          GOARCH=arm go build -v -ldflags "-X main.version=$(head -1 ./cmd/dsulc/VERSION) -X main.sha1=$(git rev-parse HEAD) -X main.buildTime=$(date +'%Y-%m-%d_%T')" -o dsulc-arm-$CURRENT_OS ./cmd/dsulc/main.go
        shell: bash

      - name: Finish
        run: |
          echo ":rocket: Build complete!" >> $GITHUB_STEP_SUMMARY
